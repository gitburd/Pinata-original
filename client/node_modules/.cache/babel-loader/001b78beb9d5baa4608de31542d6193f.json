{"ast":null,"code":"import _classCallCheck from \"/Users/tpl6/Desktop/projects/hmh/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tpl6/Desktop/projects/hmh/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tpl6/Desktop/projects/hmh/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tpl6/Desktop/projects/hmh/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tpl6/Desktop/projects/hmh/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tpl6/Desktop/projects/hmh/client/src/components/Image-Results/ImageResults.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { GridList, GridTile } from 'material-ui/GridList'; // import IconButton from 'material-ui/IconButton';\n// import ZoomIn from 'material-ui/svg-icons/action/zoom-in';\n// import Dialog from 'material-ui/Dialog';\n// import FlatButton from 'material-ui/FlatButton';\n\nimport { Link } from 'react-router-dom';\nimport { IconButton } from 'material-ui';\nimport wringtowel from '../img/wringtowel.png';\nimport workout from '../img/workout.png';\nimport wildcard from '../img/wildcard.png';\nimport takewalk from '../img/takewalk.png';\nimport takebreather from '../img/takebreather.png';\nimport punchpillow from '../img/punchpillow.png';\nimport phonefriend from '../img/phonefriend.png';\nimport cookfood from '../img/cookfood.png';\nimport music from '../img/music.png';\n\nvar ImageResults =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImageResults, _Component);\n\n  function ImageResults() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ImageResults);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ImageResults)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getStyle = function () {\n      return {\n        padding: '20px',\n        maxheight: '50 px',\n        maxWidth: '50 px'\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(ImageResults, [{\n    key: \"renderImages\",\n    value: function renderImages() {\n      // let images =[music]\n      // let imageTitle= ['music']\n      var images = [punchpillow, phonefriend, cookfood];\n      var imageTitle = ['Punch Pillow', 'Phone Friend', 'Cook Food']; //  for (let i=0; i<images.length;i++){\n      //     return (\n      //       <GridTile\n      //       key= {images[i]}\n      //       title={imageTitle[i]}\n      //       >\n      //         <img style={this.getStyle()} src={images[i]} alt={imageTitle[i]}/>\n      //       </GridTile>)\n      //   }\n\n      var i = 0;\n      return [React.createElement(GridTile, {\n        key: images[i],\n        title: imageTitle[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: this.getStyle(),\n        src: images[i],\n        alt: imageTitle[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      })), React.createElement(GridTile, {\n        key: images[i],\n        title: imageTitle[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: this.getStyle(),\n        src: images[i],\n        alt: imageTitle[i],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }))];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var images = [punchpillow, phonefriend, cookfood];\n      var imageTitle = ['Punch Pillow', 'Phone Friend', 'Cook Food'];\n      var imageListContent = React.createElement(GridList, {\n        cols: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.renderImages()); // render() {\n      //   let imageListContent;\n      //   console.log(this.props)\n      //   let images = [music,wringtowel,workout,wildcard,takewalk,takebreather,punchpillow,phonefriend,cookfood];\n      //   let imageTitle= ['Music','Wring Towel','Workout','Wild Card','Take Walk','Take Breather','Punch Pillow','Phone Friend','Cook Food'];\n      // if(images){\n      //     imageListContent = (\n      //     )\n      // }else{\n      //     imageListContent =  [\"music\"];\n      // }   \n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, imageListContent) // <div>\n      //   {this.renderImages()}\n      // </div>\n      ;\n    }\n  }]);\n\n  return ImageResults;\n}(Component);\n\nImageResults.propTypes = {\n  images: PropTypes.array.isRequired\n};\nexport default ImageResults;","map":{"version":3,"sources":["/Users/tpl6/Desktop/projects/hmh/client/src/components/Image-Results/ImageResults.js"],"names":["React","Component","PropTypes","GridList","GridTile","Link","IconButton","wringtowel","workout","wildcard","takewalk","takebreather","punchpillow","phonefriend","cookfood","music","ImageResults","getStyle","padding","maxheight","maxWidth","images","imageTitle","i","imageListContent","renderImages","propTypes","array","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,QAAR,EAAkBC,QAAlB,QAAiC,sBAAjC,C,CACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;IAGMC,Y;;;;;;;;;;;;;;;;;;UAEJC,Q,GAAU,YAAK;AACb,aAAO;AACPC,QAAAA,OAAO,EAAE,MADF;AAEPC,QAAAA,SAAS,EAAC,OAFH;AAGPC,QAAAA,QAAQ,EAAE;AAHH,OAAP;AAKH,K;;;;;;;mCAEgB;AACb;AACA;AAEA,UAAIC,MAAM,GAAG,CAACT,WAAD,EAAaC,WAAb,EAAyBC,QAAzB,CAAb;AACA,UAAIQ,UAAU,GAAE,CAAC,cAAD,EAAgB,cAAhB,EAA+B,WAA/B,CAAhB,CALa,CAOf;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIC,CAAC,GAAE,CAAP;AACA,aAAO,CACL,oBAAC,QAAD;AACI,QAAA,GAAG,EAAGF,MAAM,CAACE,CAAD,CADhB;AAEI,QAAA,KAAK,EAAED,UAAU,CAACC,CAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIM;AAAK,QAAA,KAAK,EAAE,KAAKN,QAAL,EAAZ;AAA6B,QAAA,GAAG,EAAEI,MAAM,CAACE,CAAD,CAAxC;AAA6C,QAAA,GAAG,EAAED,UAAU,CAACC,CAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJN,CADK,EAQL,oBAAC,QAAD;AACI,QAAA,GAAG,EAAGF,MAAM,CAACE,CAAD,CADhB;AAEI,QAAA,KAAK,EAAED,UAAU,CAACC,CAAD,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIM;AAAK,QAAA,KAAK,EAAE,KAAKN,QAAL,EAAZ;AAA6B,QAAA,GAAG,EAAEI,MAAM,CAACE,CAAD,CAAxC;AAA6C,QAAA,GAAG,EAAED,UAAU,CAACC,CAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJN,CARK,CAAP;AAeC;;;6BAEK;AACN,UAAIF,MAAM,GAAG,CAACT,WAAD,EAAaC,WAAb,EAAyBC,QAAzB,CAAb;AACA,UAAIQ,UAAU,GAAE,CAAC,cAAD,EAAgB,cAAhB,EAA+B,WAA/B,CAAhB;AACA,UAAIE,gBAAgB,GAClB,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGC,KAAKC,YAAL,EAHD,CADF,CAHM,CAaN;AACA;AACA;AACA;AACA;AAIE;AACA;AAEA;AACA;AACA;AACA;;AAEA,aAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,gBADH,CAHF,CAOE;AACA;AACA;AATF;AAWD;;;;EArFwBvB,S;;AA0F3Be,YAAY,CAACU,SAAb,GAAuB;AACnBL,EAAAA,MAAM,EAAEnB,SAAS,CAACyB,KAAV,CAAgBC;AADL,CAAvB;AAGA,eAAeZ,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {GridList, GridTile} from 'material-ui/GridList';\n// import IconButton from 'material-ui/IconButton';\n// import ZoomIn from 'material-ui/svg-icons/action/zoom-in';\n// import Dialog from 'material-ui/Dialog';\n// import FlatButton from 'material-ui/FlatButton';\nimport { Link } from 'react-router-dom'\nimport { IconButton } from 'material-ui';\nimport wringtowel from '../img/wringtowel.png';\nimport workout from '../img/workout.png';\nimport wildcard from '../img/wildcard.png';\nimport takewalk from '../img/takewalk.png';\nimport takebreather from '../img/takebreather.png';\nimport punchpillow from '../img/punchpillow.png';\nimport phonefriend from '../img/phonefriend.png';\nimport cookfood from '../img/cookfood.png';\nimport music from '../img/music.png';\n\n\nclass ImageResults extends Component {\n\n  getStyle= ()=> {\n    return {\n    padding: '20px',\n    maxheight:'50 px',\n    maxWidth: '50 px'\n    }\n}\n\n  renderImages() {\n    // let images =[music]\n    // let imageTitle= ['music']\n\n    let images = [punchpillow,phonefriend,cookfood];\n    let imageTitle= ['Punch Pillow','Phone Friend','Cook Food'];\n    \n  //  for (let i=0; i<images.length;i++){\n  //     return (\n        \n  //       <GridTile\n  //       key= {images[i]}\n  //       title={imageTitle[i]}\n  //       >\n  //         <img style={this.getStyle()} src={images[i]} alt={imageTitle[i]}/>\n  //       </GridTile>)\n  //   }\n  let i =0;\n  return [(\n    <GridTile\n        key= {images[i]}\n        title={imageTitle[i]}\n        >\n          <img style={this.getStyle()} src={images[i]} alt={imageTitle[i]}/>\n        </GridTile>\n  ), (\n    <GridTile\n        key= {images[i]}\n        title={imageTitle[i]}\n        >\n          <img style={this.getStyle()} src={images[i]} alt={imageTitle[i]}/>\n        </GridTile>\n  )]\n  }\n\nrender(){\n  let images = [punchpillow,phonefriend,cookfood];\n  let imageTitle= ['Punch Pillow','Phone Friend','Cook Food'];\n  let imageListContent =(\n    <GridList cols={3}>\n   \n\n    {this.renderImages()}\n  </GridList>\n\n  )\n\n\n  // render() {\n  //   let imageListContent;\n  //   console.log(this.props)\n  //   let images = [music,wringtowel,workout,wildcard,takewalk,takebreather,punchpillow,phonefriend,cookfood];\n  //   let imageTitle= ['Music','Wring Towel','Workout','Wild Card','Take Walk','Take Breather','Punch Pillow','Phone Friend','Cook Food'];\n   \n  \n    \n    // if(images){\n    //     imageListContent = (\n            \n    //     )\n    // }else{\n    //     imageListContent =  [\"music\"];\n    // }   \n\n    return (\n\n\n      <div>\n        {imageListContent }\n      </div>\n\n      // <div>\n      //   {this.renderImages()}\n      // </div>\n    )\n  }\n}\n\n\n\nImageResults.propTypes={\n    images: PropTypes.array.isRequired\n}\nexport default ImageResults; "]},"metadata":{},"sourceType":"module"}